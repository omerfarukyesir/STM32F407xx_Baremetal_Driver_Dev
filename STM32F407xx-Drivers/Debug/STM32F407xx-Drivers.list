
STM32F407xx-Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cfc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e84  08000e84  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e84  08000e84  00020418  2**0
                  CONTENTS
  4 .ARM          00000000  08000e84  08000e84  00020418  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e84  08000e84  00020418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e84  08000e84  00010e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e88  08000e88  00010e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000418  20000000  08000e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020418  2**0
                  CONTENTS
 10 .bss          00000040  20000418  20000418  00020418  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000458  20000458  00020418  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020418  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001804  00000000  00000000  0002048b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000005e8  00000000  00000000  00021c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000198  00000000  00000000  00022278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000127  00000000  00000000  00022410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002b6f  00000000  00000000  00022537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002475  00000000  00000000  000250a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ac7f  00000000  00000000  0002751b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000057c  00000000  00000000  0003219c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  00032718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000418 	.word	0x20000418
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e6c 	.word	0x08000e6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000041c 	.word	0x2000041c
 80001c4:	08000e6c 	.word	0x08000e6c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <delay>:
USART_Handle_t usart2_handle;


// Simple delay
void delay(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000/2; i++);
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	0003d08f 	.word	0x0003d08f

08000204 <USART2_GPIOInit>:


// USART2 GPIO init: PA2=TX, PA3=RX
void USART2_GPIOInit(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	// Enable GPIOA clock
	GPIO_PeriClockControl(GPIOA, ENABLE);
 800020a:	2101      	movs	r1, #1
 800020c:	480f      	ldr	r0, [pc, #60]	; (800024c <USART2_GPIOInit+0x48>)
 800020e:	f000 f8cb 	bl	80003a8 <GPIO_PeriClockControl>

	usart_gpios.pGPIOx = GPIOA;
 8000212:	4b0e      	ldr	r3, [pc, #56]	; (800024c <USART2_GPIOInit+0x48>)
 8000214:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000216:	2302      	movs	r3, #2
 8000218:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800021a:	2300      	movs	r3, #0
 800021c:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800021e:	2301      	movs	r3, #1
 8000220:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000222:	2302      	movs	r3, #2
 8000224:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000226:	2307      	movs	r3, #7
 8000228:	737b      	strb	r3, [r7, #13]

	// USART2 TX - PA2
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800022a:	2302      	movs	r3, #2
 800022c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f9a1 	bl	8000578 <GPIO_Init>

	// USART2 RX - PA3
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000236:	2303      	movs	r3, #3
 8000238:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	4618      	mov	r0, r3
 800023e:	f000 f99b 	bl	8000578 <GPIO_Init>
}
 8000242:	bf00      	nop
 8000244:	3710      	adds	r7, #16
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40020000 	.word	0x40020000

08000250 <USART2_Init>:


// USART2 init: 115200 baud, 8N1
void USART2_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <USART2_Init+0x3c>)
 8000256:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <USART2_Init+0x40>)
 8000258:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <USART2_Init+0x3c>)
 800025c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000260:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000262:	4b0a      	ldr	r3, [pc, #40]	; (800028c <USART2_Init+0x3c>)
 8000264:	2200      	movs	r2, #0
 8000266:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000268:	4b08      	ldr	r3, [pc, #32]	; (800028c <USART2_Init+0x3c>)
 800026a:	2200      	movs	r2, #0
 800026c:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 800026e:	4b07      	ldr	r3, [pc, #28]	; (800028c <USART2_Init+0x3c>)
 8000270:	2200      	movs	r2, #0
 8000272:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000274:	4b05      	ldr	r3, [pc, #20]	; (800028c <USART2_Init+0x3c>)
 8000276:	2200      	movs	r2, #0
 8000278:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <USART2_Init+0x3c>)
 800027c:	2200      	movs	r2, #0
 800027e:	739a      	strb	r2, [r3, #14]

	USART_Init(&usart2_handle);
 8000280:	4802      	ldr	r0, [pc, #8]	; (800028c <USART2_Init+0x3c>)
 8000282:	f000 fcd1 	bl	8000c28 <USART_Init>
}
 8000286:	bf00      	nop
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	20000434 	.word	0x20000434
 8000290:	40004400 	.word	0x40004400

08000294 <GPIO_ButtonInit>:


// Button and LED GPIO init
void GPIO_ButtonInit(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn, GpioLed;

	// Button GPIO - PA0
	GPIO_PeriClockControl(GPIOA, ENABLE);
 800029a:	2101      	movs	r1, #1
 800029c:	4814      	ldr	r0, [pc, #80]	; (80002f0 <GPIO_ButtonInit+0x5c>)
 800029e:	f000 f883 	bl	80003a8 <GPIO_PeriClockControl>

	GPIOBtn.pGPIOx = GPIOA;
 80002a2:	4b13      	ldr	r3, [pc, #76]	; (80002f0 <GPIO_ButtonInit+0x5c>)
 80002a4:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 80002aa:	2300      	movs	r3, #0
 80002ac:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002ae:	2302      	movs	r3, #2
 80002b0:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002b2:	2300      	movs	r3, #0
 80002b4:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 80002b6:	f107 030c 	add.w	r3, r7, #12
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 f95c 	bl	8000578 <GPIO_Init>

	// LED GPIO - PD12
	GPIO_PeriClockControl(GPIOD, ENABLE);
 80002c0:	2101      	movs	r1, #1
 80002c2:	480c      	ldr	r0, [pc, #48]	; (80002f4 <GPIO_ButtonInit+0x60>)
 80002c4:	f000 f870 	bl	80003a8 <GPIO_PeriClockControl>

	GpioLed.pGPIOx = GPIOD;
 80002c8:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <GPIO_ButtonInit+0x60>)
 80002ca:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002cc:	230c      	movs	r3, #12
 80002ce:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUTPUT;
 80002d0:	2301      	movs	r3, #1
 80002d2:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002d4:	2302      	movs	r3, #2
 80002d6:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80002d8:	2300      	movs	r3, #0
 80002da:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002dc:	2300      	movs	r3, #0
 80002de:	71fb      	strb	r3, [r7, #7]

	GPIO_Init(&GpioLed);
 80002e0:	463b      	mov	r3, r7
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 f948 	bl	8000578 <GPIO_Init>
}
 80002e8:	bf00      	nop
 80002ea:	3718      	adds	r7, #24
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	40020000 	.word	0x40020000
 80002f4:	40020c00 	.word	0x40020c00

080002f8 <main>:


int main(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	// Initialize button and LED
	GPIO_ButtonInit();
 80002fc:	f7ff ffca 	bl	8000294 <GPIO_ButtonInit>

	// Initialize USART2 GPIO
	USART2_GPIOInit();
 8000300:	f7ff ff80 	bl	8000204 <USART2_GPIOInit>

	// Initialize USART2 peripheral
	USART2_Init();
 8000304:	f7ff ffa4 	bl	8000250 <USART2_Init>

	// Enable USART2
	USART_PeripheralControl(USART2, ENABLE);
 8000308:	2101      	movs	r1, #1
 800030a:	480d      	ldr	r0, [pc, #52]	; (8000340 <main+0x48>)
 800030c:	f000 fd20 	bl	8000d50 <USART_PeripheralControl>

	while(1)
	{
		// Wait for button press (PA0)
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000310:	bf00      	nop
 8000312:	2100      	movs	r1, #0
 8000314:	480b      	ldr	r0, [pc, #44]	; (8000344 <main+0x4c>)
 8000316:	f000 facf 	bl	80008b8 <GPIO_ReadFromInputPin>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d0f8      	beq.n	8000312 <main+0x1a>

		// Debounce delay
		delay();
 8000320:	f7ff ff5a 	bl	80001d8 <delay>

		// Toggle LED
		GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_NO_12);
 8000324:	210c      	movs	r1, #12
 8000326:	4808      	ldr	r0, [pc, #32]	; (8000348 <main+0x50>)
 8000328:	f000 fadc 	bl	80008e4 <GPIO_ToggleOutputPin>

		// Send message via USART2
		USART_SendData(&usart2_handle, (uint8_t*)msg, strlen(msg));
 800032c:	4807      	ldr	r0, [pc, #28]	; (800034c <main+0x54>)
 800032e:	f7ff ff4b 	bl	80001c8 <strlen>
 8000332:	4603      	mov	r3, r0
 8000334:	461a      	mov	r2, r3
 8000336:	4905      	ldr	r1, [pc, #20]	; (800034c <main+0x54>)
 8000338:	4805      	ldr	r0, [pc, #20]	; (8000350 <main+0x58>)
 800033a:	f000 fd25 	bl	8000d88 <USART_SendData>
		while(!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800033e:	e7e7      	b.n	8000310 <main+0x18>
 8000340:	40004400 	.word	0x40004400
 8000344:	40020000 	.word	0x40020000
 8000348:	40020c00 	.word	0x40020c00
 800034c:	20000000 	.word	0x20000000
 8000350:	20000434 	.word	0x20000434

08000354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000354:	480d      	ldr	r0, [pc, #52]	; (800038c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000358:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480c      	ldr	r0, [pc, #48]	; (8000390 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490d      	ldr	r1, [pc, #52]	; (8000394 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0a      	ldr	r2, [pc, #40]	; (800039c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000382:	f000 fd4f 	bl	8000e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ffb7 	bl	80002f8 <main>

0800038a <LoopForever>:

LoopForever:
  b LoopForever
 800038a:	e7fe      	b.n	800038a <LoopForever>
  ldr   r0, =_estack
 800038c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000394:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 8000398:	08000e8c 	.word	0x08000e8c
  ldr r2, =_sbss
 800039c:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 80003a0:	20000458 	.word	0x20000458

080003a4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a4:	e7fe      	b.n	80003a4 <ADC_IRQHandler>
	...

080003a8 <GPIO_PeriClockControl>:
 * @return            - none
 *
 * @Note              - none
 *********************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
 80003b0:	460b      	mov	r3, r1
 80003b2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003b4:	78fb      	ldrb	r3, [r7, #3]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d162      	bne.n	8000480 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a64      	ldr	r2, [pc, #400]	; (8000550 <GPIO_PeriClockControl+0x1a8>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003c2:	4b64      	ldr	r3, [pc, #400]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a63      	ldr	r2, [pc, #396]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	f043 0301 	orr.w	r3, r3, #1
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if(pGPIOx == GPIOI)
			GPIOI_PCLK_DI();
	}
}
 80003ce:	e0b9      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a61      	ldr	r2, [pc, #388]	; (8000558 <GPIO_PeriClockControl+0x1b0>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003d8:	4b5e      	ldr	r3, [pc, #376]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a5d      	ldr	r2, [pc, #372]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80003de:	f043 0302 	orr.w	r3, r3, #2
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e0ae      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a5c      	ldr	r2, [pc, #368]	; (800055c <GPIO_PeriClockControl+0x1b4>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ee:	4b59      	ldr	r3, [pc, #356]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a58      	ldr	r2, [pc, #352]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	f043 0304 	orr.w	r3, r3, #4
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e0a3      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a58      	ldr	r2, [pc, #352]	; (8000560 <GPIO_PeriClockControl+0x1b8>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000404:	4b53      	ldr	r3, [pc, #332]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a52      	ldr	r2, [pc, #328]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 800040a:	f043 0308 	orr.w	r3, r3, #8
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e098      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a53      	ldr	r2, [pc, #332]	; (8000564 <GPIO_PeriClockControl+0x1bc>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800041a:	4b4e      	ldr	r3, [pc, #312]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a4d      	ldr	r2, [pc, #308]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 8000420:	f043 0310 	orr.w	r3, r3, #16
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e08d      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a4f      	ldr	r2, [pc, #316]	; (8000568 <GPIO_PeriClockControl+0x1c0>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000430:	4b48      	ldr	r3, [pc, #288]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a47      	ldr	r2, [pc, #284]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	e082      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a4a      	ldr	r2, [pc, #296]	; (800056c <GPIO_PeriClockControl+0x1c4>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000446:	4b43      	ldr	r3, [pc, #268]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044a:	4a42      	ldr	r2, [pc, #264]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 800044c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000452:	e077      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a46      	ldr	r2, [pc, #280]	; (8000570 <GPIO_PeriClockControl+0x1c8>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800045c:	4b3d      	ldr	r3, [pc, #244]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4a3c      	ldr	r2, [pc, #240]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 8000462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000466:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000468:	e06c      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a41      	ldr	r2, [pc, #260]	; (8000574 <GPIO_PeriClockControl+0x1cc>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d168      	bne.n	8000544 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000472:	4b38      	ldr	r3, [pc, #224]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000476:	4a37      	ldr	r2, [pc, #220]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 8000478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800047c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047e:	e061      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a33      	ldr	r2, [pc, #204]	; (8000550 <GPIO_PeriClockControl+0x1a8>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000488:	4b32      	ldr	r3, [pc, #200]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4a31      	ldr	r2, [pc, #196]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 800048e:	f023 0301 	bic.w	r3, r3, #1
 8000492:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000494:	e056      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a2f      	ldr	r2, [pc, #188]	; (8000558 <GPIO_PeriClockControl+0x1b0>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800049e:	4b2d      	ldr	r3, [pc, #180]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a2:	4a2c      	ldr	r2, [pc, #176]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80004a4:	f023 0302 	bic.w	r3, r3, #2
 80004a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004aa:	e04b      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a2b      	ldr	r2, [pc, #172]	; (800055c <GPIO_PeriClockControl+0x1b4>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d106      	bne.n	80004c2 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 80004b4:	4b27      	ldr	r3, [pc, #156]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b8:	4a26      	ldr	r2, [pc, #152]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80004ba:	f023 0304 	bic.w	r3, r3, #4
 80004be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c0:	e040      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a26      	ldr	r2, [pc, #152]	; (8000560 <GPIO_PeriClockControl+0x1b8>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d106      	bne.n	80004d8 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 80004ca:	4b22      	ldr	r3, [pc, #136]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	4a21      	ldr	r2, [pc, #132]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80004d0:	f023 0308 	bic.w	r3, r3, #8
 80004d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d6:	e035      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	4a22      	ldr	r2, [pc, #136]	; (8000564 <GPIO_PeriClockControl+0x1bc>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d106      	bne.n	80004ee <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 80004e0:	4b1c      	ldr	r3, [pc, #112]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e4:	4a1b      	ldr	r2, [pc, #108]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80004e6:	f023 0310 	bic.w	r3, r3, #16
 80004ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ec:	e02a      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	4a1d      	ldr	r2, [pc, #116]	; (8000568 <GPIO_PeriClockControl+0x1c0>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d106      	bne.n	8000504 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 80004f6:	4b17      	ldr	r3, [pc, #92]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a16      	ldr	r2, [pc, #88]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 80004fc:	f023 0320 	bic.w	r3, r3, #32
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000502:	e01f      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	4a19      	ldr	r2, [pc, #100]	; (800056c <GPIO_PeriClockControl+0x1c4>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d106      	bne.n	800051a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 800050e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000510:	4a10      	ldr	r2, [pc, #64]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 8000512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000516:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000518:	e014      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4a14      	ldr	r2, [pc, #80]	; (8000570 <GPIO_PeriClockControl+0x1c8>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d106      	bne.n	8000530 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 8000528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800052e:	e009      	b.n	8000544 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4a10      	ldr	r2, [pc, #64]	; (8000574 <GPIO_PeriClockControl+0x1cc>)
 8000534:	4293      	cmp	r3, r2
 8000536:	d105      	bne.n	8000544 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 800053a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053c:	4a05      	ldr	r2, [pc, #20]	; (8000554 <GPIO_PeriClockControl+0x1ac>)
 800053e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000542:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40020000 	.word	0x40020000
 8000554:	40023800 	.word	0x40023800
 8000558:	40020400 	.word	0x40020400
 800055c:	40020800 	.word	0x40020800
 8000560:	40020c00 	.word	0x40020c00
 8000564:	40021000 	.word	0x40021000
 8000568:	40021400 	.word	0x40021400
 800056c:	40021800 	.word	0x40021800
 8000570:	40021c00 	.word	0x40021c00
 8000574:	40022000 	.word	0x40022000

08000578 <GPIO_Init>:
 * @return            - none
 *
 * @Note              - none
 *********************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000578:	b480      	push	{r7}
 800057a:	b087      	sub	sp, #28
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporary register value
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]

	// 1. Configure mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	795b      	ldrb	r3, [r3, #5]
 8000588:	2b03      	cmp	r3, #3
 800058a:	d820      	bhi.n	80005ce <GPIO_Init+0x56>
	{
		// Non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	795b      	ldrb	r3, [r3, #5]
 8000590:	461a      	mov	r2, r3
			   (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	005b      	lsls	r3, r3, #1
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	681a      	ldr	r2, [r3, #0]
			   (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	005b      	lsls	r3, r3, #1
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<
 80005aa:	2103      	movs	r1, #3
 80005ac:	fa01 f303 	lsl.w	r3, r1, r3
 80005b0:	43db      	mvns	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	400a      	ands	r2, r1
 80005ba:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	6819      	ldr	r1, [r3, #0]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	697a      	ldr	r2, [r7, #20]
 80005c8:	430a      	orrs	r2, r1
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	e0cb      	b.n	8000766 <GPIO_Init+0x1ee>
	}
	else
	{
		// Interrupt mode configuration
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	795b      	ldrb	r3, [r3, #5]
 80005d2:	2b04      	cmp	r3, #4
 80005d4:	d117      	bne.n	8000606 <GPIO_Init+0x8e>
		{
			// Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d6:	4b4b      	ldr	r3, [pc, #300]	; (8000704 <GPIO_Init+0x18c>)
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	7912      	ldrb	r2, [r2, #4]
 80005de:	4611      	mov	r1, r2
 80005e0:	2201      	movs	r2, #1
 80005e2:	408a      	lsls	r2, r1
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a47      	ldr	r2, [pc, #284]	; (8000704 <GPIO_Init+0x18c>)
 80005e8:	430b      	orrs	r3, r1
 80005ea:	60d3      	str	r3, [r2, #12]
			// Clear RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ec:	4b45      	ldr	r3, [pc, #276]	; (8000704 <GPIO_Init+0x18c>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7912      	ldrb	r2, [r2, #4]
 80005f4:	4611      	mov	r1, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	408a      	lsls	r2, r1
 80005fa:	43d2      	mvns	r2, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a41      	ldr	r2, [pc, #260]	; (8000704 <GPIO_Init+0x18c>)
 8000600:	400b      	ands	r3, r1
 8000602:	6093      	str	r3, [r2, #8]
 8000604:	e035      	b.n	8000672 <GPIO_Init+0xfa>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	2b05      	cmp	r3, #5
 800060c:	d117      	bne.n	800063e <GPIO_Init+0xc6>
		{
			// Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060e:	4b3d      	ldr	r3, [pc, #244]	; (8000704 <GPIO_Init+0x18c>)
 8000610:	689b      	ldr	r3, [r3, #8]
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	7912      	ldrb	r2, [r2, #4]
 8000616:	4611      	mov	r1, r2
 8000618:	2201      	movs	r2, #1
 800061a:	408a      	lsls	r2, r1
 800061c:	4611      	mov	r1, r2
 800061e:	4a39      	ldr	r2, [pc, #228]	; (8000704 <GPIO_Init+0x18c>)
 8000620:	430b      	orrs	r3, r1
 8000622:	6093      	str	r3, [r2, #8]
			// Clear FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000624:	4b37      	ldr	r3, [pc, #220]	; (8000704 <GPIO_Init+0x18c>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7912      	ldrb	r2, [r2, #4]
 800062c:	4611      	mov	r1, r2
 800062e:	2201      	movs	r2, #1
 8000630:	408a      	lsls	r2, r1
 8000632:	43d2      	mvns	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4a33      	ldr	r2, [pc, #204]	; (8000704 <GPIO_Init+0x18c>)
 8000638:	400b      	ands	r3, r1
 800063a:	60d3      	str	r3, [r2, #12]
 800063c:	e019      	b.n	8000672 <GPIO_Init+0xfa>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	795b      	ldrb	r3, [r3, #5]
 8000642:	2b06      	cmp	r3, #6
 8000644:	d115      	bne.n	8000672 <GPIO_Init+0xfa>
		{
			// Both edges
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000646:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <GPIO_Init+0x18c>)
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	7912      	ldrb	r2, [r2, #4]
 800064e:	4611      	mov	r1, r2
 8000650:	2201      	movs	r2, #1
 8000652:	408a      	lsls	r2, r1
 8000654:	4611      	mov	r1, r2
 8000656:	4a2b      	ldr	r2, [pc, #172]	; (8000704 <GPIO_Init+0x18c>)
 8000658:	430b      	orrs	r3, r1
 800065a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065c:	4b29      	ldr	r3, [pc, #164]	; (8000704 <GPIO_Init+0x18c>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	7912      	ldrb	r2, [r2, #4]
 8000664:	4611      	mov	r1, r2
 8000666:	2201      	movs	r2, #1
 8000668:	408a      	lsls	r2, r1
 800066a:	4611      	mov	r1, r2
 800066c:	4a25      	ldr	r2, [pc, #148]	; (8000704 <GPIO_Init+0x18c>)
 800066e:	430b      	orrs	r3, r1
 8000670:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	089b      	lsrs	r3, r3, #2
 8000678:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	791b      	ldrb	r3, [r3, #4]
 800067e:	f003 0303 	and.w	r3, r3, #3
 8000682:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a1f      	ldr	r2, [pc, #124]	; (8000708 <GPIO_Init+0x190>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d04e      	beq.n	800072c <GPIO_Init+0x1b4>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a1e      	ldr	r2, [pc, #120]	; (800070c <GPIO_Init+0x194>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d032      	beq.n	80006fe <GPIO_Init+0x186>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <GPIO_Init+0x198>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d02b      	beq.n	80006fa <GPIO_Init+0x182>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a1b      	ldr	r2, [pc, #108]	; (8000714 <GPIO_Init+0x19c>)
 80006a8:	4293      	cmp	r3, r2
 80006aa:	d024      	beq.n	80006f6 <GPIO_Init+0x17e>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a19      	ldr	r2, [pc, #100]	; (8000718 <GPIO_Init+0x1a0>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d01d      	beq.n	80006f2 <GPIO_Init+0x17a>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	4a18      	ldr	r2, [pc, #96]	; (800071c <GPIO_Init+0x1a4>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d016      	beq.n	80006ee <GPIO_Init+0x176>
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a16      	ldr	r2, [pc, #88]	; (8000720 <GPIO_Init+0x1a8>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d00f      	beq.n	80006ea <GPIO_Init+0x172>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a15      	ldr	r2, [pc, #84]	; (8000724 <GPIO_Init+0x1ac>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d008      	beq.n	80006e6 <GPIO_Init+0x16e>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a13      	ldr	r2, [pc, #76]	; (8000728 <GPIO_Init+0x1b0>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d101      	bne.n	80006e2 <GPIO_Init+0x16a>
 80006de:	2308      	movs	r3, #8
 80006e0:	e025      	b.n	800072e <GPIO_Init+0x1b6>
 80006e2:	2300      	movs	r3, #0
 80006e4:	e023      	b.n	800072e <GPIO_Init+0x1b6>
 80006e6:	2307      	movs	r3, #7
 80006e8:	e021      	b.n	800072e <GPIO_Init+0x1b6>
 80006ea:	2306      	movs	r3, #6
 80006ec:	e01f      	b.n	800072e <GPIO_Init+0x1b6>
 80006ee:	2305      	movs	r3, #5
 80006f0:	e01d      	b.n	800072e <GPIO_Init+0x1b6>
 80006f2:	2304      	movs	r3, #4
 80006f4:	e01b      	b.n	800072e <GPIO_Init+0x1b6>
 80006f6:	2303      	movs	r3, #3
 80006f8:	e019      	b.n	800072e <GPIO_Init+0x1b6>
 80006fa:	2302      	movs	r3, #2
 80006fc:	e017      	b.n	800072e <GPIO_Init+0x1b6>
 80006fe:	2301      	movs	r3, #1
 8000700:	e015      	b.n	800072e <GPIO_Init+0x1b6>
 8000702:	bf00      	nop
 8000704:	40013c00 	.word	0x40013c00
 8000708:	40020000 	.word	0x40020000
 800070c:	40020400 	.word	0x40020400
 8000710:	40020800 	.word	0x40020800
 8000714:	40020c00 	.word	0x40020c00
 8000718:	40021000 	.word	0x40021000
 800071c:	40021400 	.word	0x40021400
 8000720:	40021800 	.word	0x40021800
 8000724:	40021c00 	.word	0x40021c00
 8000728:	40022000 	.word	0x40022000
 800072c:	2300      	movs	r3, #0
 800072e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000730:	4b5e      	ldr	r3, [pc, #376]	; (80008ac <GPIO_Init+0x334>)
 8000732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000734:	4a5d      	ldr	r2, [pc, #372]	; (80008ac <GPIO_Init+0x334>)
 8000736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 800073c:	7c7a      	ldrb	r2, [r7, #17]
 800073e:	7cbb      	ldrb	r3, [r7, #18]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	fa02 f103 	lsl.w	r1, r2, r3
 8000746:	4a5a      	ldr	r2, [pc, #360]	; (80008b0 <GPIO_Init+0x338>)
 8000748:	7cfb      	ldrb	r3, [r7, #19]
 800074a:	3302      	adds	r3, #2
 800074c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000750:	4b58      	ldr	r3, [pc, #352]	; (80008b4 <GPIO_Init+0x33c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	7912      	ldrb	r2, [r2, #4]
 8000758:	4611      	mov	r1, r2
 800075a:	2201      	movs	r2, #1
 800075c:	408a      	lsls	r2, r1
 800075e:	4611      	mov	r1, r2
 8000760:	4a54      	ldr	r2, [pc, #336]	; (80008b4 <GPIO_Init+0x33c>)
 8000762:	430b      	orrs	r3, r1
 8000764:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]

	// 2. Configure speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	799b      	ldrb	r3, [r3, #6]
 800076e:	461a      	mov	r2, r3
		   (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	005b      	lsls	r3, r3, #1
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000776:	fa02 f303 	lsl.w	r3, r2, r3
 800077a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 <<
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	689a      	ldr	r2, [r3, #8]
		   (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	005b      	lsls	r3, r3, #1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 <<
 8000788:	2103      	movs	r1, #3
 800078a:	fa01 f303 	lsl.w	r3, r1, r3
 800078e:	43db      	mvns	r3, r3
 8000790:	4619      	mov	r1, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	400a      	ands	r2, r1
 8000798:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	6899      	ldr	r1, [r3, #8]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	609a      	str	r2, [r3, #8]

	temp = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]

	// 3. Configure pull-up/pull-down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	79db      	ldrb	r3, [r3, #7]
 80007b2:	461a      	mov	r2, r3
		   (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	005b      	lsls	r3, r3, #1
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 <<
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	68da      	ldr	r2, [r3, #12]
		   (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	791b      	ldrb	r3, [r3, #4]
 80007ca:	005b      	lsls	r3, r3, #1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 <<
 80007cc:	2103      	movs	r1, #3
 80007ce:	fa01 f303 	lsl.w	r3, r1, r3
 80007d2:	43db      	mvns	r3, r3
 80007d4:	4619      	mov	r1, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	400a      	ands	r2, r1
 80007dc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	68d9      	ldr	r1, [r3, #12]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	697a      	ldr	r2, [r7, #20]
 80007ea:	430a      	orrs	r2, r1
 80007ec:	60da      	str	r2, [r3, #12]

	temp = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

	// 4. Configure output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7a1b      	ldrb	r3, [r3, #8]
 80007f6:	461a      	mov	r2, r3
		   (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	791b      	ldrb	r3, [r3, #4]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 <<
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	685a      	ldr	r2, [r3, #4]
		   (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	4619      	mov	r1, r3
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 <<
 800080e:	2301      	movs	r3, #1
 8000810:	408b      	lsls	r3, r1
 8000812:	43db      	mvns	r3, r3
 8000814:	4619      	mov	r1, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	400a      	ands	r2, r1
 800081c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	6859      	ldr	r1, [r3, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	430a      	orrs	r2, r1
 800082c:	605a      	str	r2, [r3, #4]

	temp = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]

	// 5. Configure alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	795b      	ldrb	r3, [r3, #5]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d131      	bne.n	800089e <GPIO_Init+0x326>
	{
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	08db      	lsrs	r3, r3, #3
 8000840:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	7c3a      	ldrb	r2, [r7, #16]
 8000852:	3208      	adds	r2, #8
 8000854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	220f      	movs	r2, #15
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43db      	mvns	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	7c3a      	ldrb	r2, [r7, #16]
 800086c:	4001      	ands	r1, r0
 800086e:	3208      	adds	r2, #8
 8000870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	7c3a      	ldrb	r2, [r7, #16]
 800087a:	3208      	adds	r2, #8
 800087c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
			(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	7a5b      	ldrb	r3, [r3, #9]
 8000884:	461a      	mov	r2, r3
 8000886:	7bfb      	ldrb	r3, [r7, #15]
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	4618      	mov	r0, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	7c3a      	ldrb	r2, [r7, #16]
 8000896:	4301      	orrs	r1, r0
 8000898:	3208      	adds	r2, #8
 800089a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800089e:	bf00      	nop
 80008a0:	371c      	adds	r7, #28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40023800 	.word	0x40023800
 80008b0:	40013800 	.word	0x40013800
 80008b4:	40013c00 	.word	0x40013c00

080008b8 <GPIO_ReadFromInputPin>:
 *
 * @Note        - 0 or 1
 *
 *****************************************************************/
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691a      	ldr	r2, [r3, #16]
 80008c8:	78fb      	ldrb	r3, [r7, #3]
 80008ca:	fa22 f303 	lsr.w	r3, r2, r3
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	73fb      	strb	r3, [r7, #15]
	return value;
 80008d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <GPIO_ToggleOutputPin>:
 *
 * @Note        - None
 *
 *****************************************************************/
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	78fa      	ldrb	r2, [r7, #3]
 80008f6:	2101      	movs	r1, #1
 80008f8:	fa01 f202 	lsl.w	r2, r1, r2
 80008fc:	405a      	eors	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	615a      	str	r2, [r3, #20]
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <RCC_GetPCLK1Value>:
 *
 * @Note              - This function considers system clock source (HSI/HSE/PLL)
 *                      and applies AHB and APB1 prescalers
 *********************************************************************/
uint32_t RCC_GetPCLK1Value(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	// Read system clock source from CFGR register (SWS bits)
	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000916:	4b25      	ldr	r3, [pc, #148]	; (80009ac <RCC_GetPCLK1Value+0x9c>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 0303 	and.w	r3, r3, #3
 8000922:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000924:	7a7b      	ldrb	r3, [r7, #9]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d102      	bne.n	8000930 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;   // HSI oscillator used as system clock
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <RCC_GetPCLK1Value+0xa0>)
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e00b      	b.n	8000948 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)
 8000930:	7a7b      	ldrb	r3, [r7, #9]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d102      	bne.n	800093c <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;    // HSE oscillator used as system clock
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <RCC_GetPCLK1Value+0xa4>)
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e005      	b.n	8000948 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)
 800093c:	7a7b      	ldrb	r3, [r7, #9]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d102      	bne.n	8000948 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();   // PLL used as system clock
 8000942:	f000 f895 	bl	8000a70 <RCC_GetPLLOutputClock>
 8000946:	60f8      	str	r0, [r7, #12]
	}

	// Read AHB prescaler value (HPRE bits)
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <RCC_GetPCLK1Value+0x9c>)
 800094a:	689b      	ldr	r3, [r3, #8]
 800094c:	091b      	lsrs	r3, r3, #4
 800094e:	b2db      	uxtb	r3, r3
 8000950:	f003 030f 	and.w	r3, r3, #15
 8000954:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000956:	7a3b      	ldrb	r3, [r7, #8]
 8000958:	2b07      	cmp	r3, #7
 800095a:	d802      	bhi.n	8000962 <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;   // No division
 800095c:	2301      	movs	r3, #1
 800095e:	72fb      	strb	r3, [r7, #11]
 8000960:	e005      	b.n	800096e <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp - 8];
 8000962:	7a3b      	ldrb	r3, [r7, #8]
 8000964:	3b08      	subs	r3, #8
 8000966:	4a14      	ldr	r2, [pc, #80]	; (80009b8 <RCC_GetPCLK1Value+0xa8>)
 8000968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096c:	72fb      	strb	r3, [r7, #11]
	}

	// Read APB1 prescaler value (PPRE1 bits)
	temp = ((RCC->CFGR >> 10) & 0x7);
 800096e:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <RCC_GetPCLK1Value+0x9c>)
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	0a9b      	lsrs	r3, r3, #10
 8000974:	b2db      	uxtb	r3, r3
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 800097c:	7a3b      	ldrb	r3, [r7, #8]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d802      	bhi.n	8000988 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;   // No division
 8000982:	2301      	movs	r3, #1
 8000984:	72bb      	strb	r3, [r7, #10]
 8000986:	e004      	b.n	8000992 <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4];
 8000988:	7a3b      	ldrb	r3, [r7, #8]
 800098a:	3b04      	subs	r3, #4
 800098c:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <RCC_GetPCLK1Value+0xac>)
 800098e:	5cd3      	ldrb	r3, [r2, r3]
 8000990:	72bb      	strb	r3, [r7, #10]
	}

	// Calculate APB1 clock
	pclk1 = (SystemClk / ahbp) / apb1p;
 8000992:	7afb      	ldrb	r3, [r7, #11]
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	fbb2 f2f3 	udiv	r2, r2, r3
 800099a:	7abb      	ldrb	r3, [r7, #10]
 800099c:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a0:	607b      	str	r3, [r7, #4]

	return pclk1;
 80009a2:	687b      	ldr	r3, [r7, #4]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40023800 	.word	0x40023800
 80009b0:	00f42400 	.word	0x00f42400
 80009b4:	007a1200 	.word	0x007a1200
 80009b8:	20000400 	.word	0x20000400
 80009bc:	20000410 	.word	0x20000410

080009c0 <RCC_GetPCLK2Value>:
 *
 * @Note              - This function considers system clock source (HSI/HSE/PLL)
 *                      and applies AHB and APB2 prescalers
 *********************************************************************/
uint32_t RCC_GetPCLK2Value(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
	uint32_t pclk2, SystemClk;
	uint8_t clksrc, temp, ahbp, apb2p;

	// Read system clock source from CFGR register (SWS bits)
	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80009c6:	4b25      	ldr	r3, [pc, #148]	; (8000a5c <RCC_GetPCLK2Value+0x9c>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	089b      	lsrs	r3, r3, #2
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f003 0303 	and.w	r3, r3, #3
 80009d2:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 80009d4:	7a7b      	ldrb	r3, [r7, #9]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d102      	bne.n	80009e0 <RCC_GetPCLK2Value+0x20>
	{
		SystemClk = 16000000;   // HSI oscillator used as system clock
 80009da:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <RCC_GetPCLK2Value+0xa0>)
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	e00b      	b.n	80009f8 <RCC_GetPCLK2Value+0x38>
	}
	else if(clksrc == 1)
 80009e0:	7a7b      	ldrb	r3, [r7, #9]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d102      	bne.n	80009ec <RCC_GetPCLK2Value+0x2c>
	{
		SystemClk = 8000000;    // HSE oscillator used as system clock
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <RCC_GetPCLK2Value+0xa4>)
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	e005      	b.n	80009f8 <RCC_GetPCLK2Value+0x38>
	}
	else if(clksrc == 2)
 80009ec:	7a7b      	ldrb	r3, [r7, #9]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d102      	bne.n	80009f8 <RCC_GetPCLK2Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();   // PLL used as system clock
 80009f2:	f000 f83d 	bl	8000a70 <RCC_GetPLLOutputClock>
 80009f6:	60f8      	str	r0, [r7, #12]
	}

	// Read AHB prescaler value (HPRE bits)
	temp = ((RCC->CFGR >> 4) & 0xF);
 80009f8:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <RCC_GetPCLK2Value+0x9c>)
 80009fa:	689b      	ldr	r3, [r3, #8]
 80009fc:	091b      	lsrs	r3, r3, #4
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	f003 030f 	and.w	r3, r3, #15
 8000a04:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000a06:	7a3b      	ldrb	r3, [r7, #8]
 8000a08:	2b07      	cmp	r3, #7
 8000a0a:	d802      	bhi.n	8000a12 <RCC_GetPCLK2Value+0x52>
	{
		ahbp = 1;   // No division
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	72fb      	strb	r3, [r7, #11]
 8000a10:	e005      	b.n	8000a1e <RCC_GetPCLK2Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp - 8];
 8000a12:	7a3b      	ldrb	r3, [r7, #8]
 8000a14:	3b08      	subs	r3, #8
 8000a16:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <RCC_GetPCLK2Value+0xa8>)
 8000a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a1c:	72fb      	strb	r3, [r7, #11]
	}

	// Read APB2 prescaler value (PPRE2 bits)
	temp = ((RCC->CFGR >> 13) & 0x7);
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <RCC_GetPCLK2Value+0x9c>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	0b5b      	lsrs	r3, r3, #13
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000a2c:	7a3b      	ldrb	r3, [r7, #8]
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d802      	bhi.n	8000a38 <RCC_GetPCLK2Value+0x78>
	{
		apb2p = 1;   // No division
 8000a32:	2301      	movs	r3, #1
 8000a34:	72bb      	strb	r3, [r7, #10]
 8000a36:	e004      	b.n	8000a42 <RCC_GetPCLK2Value+0x82>
	}
	else
	{
		apb2p = APB2_PreScaler[temp - 4];
 8000a38:	7a3b      	ldrb	r3, [r7, #8]
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <RCC_GetPCLK2Value+0xac>)
 8000a3e:	5cd3      	ldrb	r3, [r2, r3]
 8000a40:	72bb      	strb	r3, [r7, #10]
	}

	// Calculate APB2 clock
	pclk2 = (SystemClk / ahbp) / apb2p;
 8000a42:	7afb      	ldrb	r3, [r7, #11]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8000a4a:	7abb      	ldrb	r3, [r7, #10]
 8000a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a50:	607b      	str	r3, [r7, #4]

	return pclk2;
 8000a52:	687b      	ldr	r3, [r7, #4]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	00f42400 	.word	0x00f42400
 8000a64:	007a1200 	.word	0x007a1200
 8000a68:	20000400 	.word	0x20000400
 8000a6c:	20000414 	.word	0x20000414

08000a70 <RCC_GetPLLOutputClock>:
 *
 * @Note              - This function is not implemented yet
 *                      User should implement based on their PLL configuration
 *********************************************************************/
uint32_t RCC_GetPLLOutputClock(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
	// TODO: Implement PLL calculation based on:
	// PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
	// PLL_OUTPUT = PLL_VCO / PLLP
	return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <USART_PeriClockControl>:
 * @return            - none
 *
 * @Note              - none
 *********************************************************************/
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	460b      	mov	r3, r1
 8000a8a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d140      	bne.n	8000b14 <USART_PeriClockControl+0x94>
	{
		if(pUSARTx == USART1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a22      	ldr	r2, [pc, #136]	; (8000b20 <USART_PeriClockControl+0xa0>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d106      	bne.n	8000aa8 <USART_PeriClockControl+0x28>
			USART1_PCLK_EN();
 8000a9a:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <USART_PeriClockControl+0xa4>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a21      	ldr	r2, [pc, #132]	; (8000b24 <USART_PeriClockControl+0xa4>)
 8000aa0:	f043 0310 	orr.w	r3, r3, #16
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		// TODO: Implement clock disable macros
	}
}
 8000aa6:	e035      	b.n	8000b14 <USART_PeriClockControl+0x94>
		else if(pUSARTx == USART2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a1f      	ldr	r2, [pc, #124]	; (8000b28 <USART_PeriClockControl+0xa8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d106      	bne.n	8000abe <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <USART_PeriClockControl+0xa4>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <USART_PeriClockControl+0xa4>)
 8000ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000abc:	e02a      	b.n	8000b14 <USART_PeriClockControl+0x94>
		else if(pUSARTx == USART3)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <USART_PeriClockControl+0xac>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d106      	bne.n	8000ad4 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <USART_PeriClockControl+0xa4>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aca:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <USART_PeriClockControl+0xa4>)
 8000acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ad0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ad2:	e01f      	b.n	8000b14 <USART_PeriClockControl+0x94>
		else if(pUSARTx == UART4)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <USART_PeriClockControl+0xb0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d106      	bne.n	8000aea <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <USART_PeriClockControl+0xa4>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <USART_PeriClockControl+0xa4>)
 8000ae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ae8:	e014      	b.n	8000b14 <USART_PeriClockControl+0x94>
		else if(pUSARTx == UART5)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <USART_PeriClockControl+0xb4>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d106      	bne.n	8000b00 <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <USART_PeriClockControl+0xa4>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <USART_PeriClockControl+0xa4>)
 8000af8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000afc:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000afe:	e009      	b.n	8000b14 <USART_PeriClockControl+0x94>
		else if(pUSARTx == USART6)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a0d      	ldr	r2, [pc, #52]	; (8000b38 <USART_PeriClockControl+0xb8>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d105      	bne.n	8000b14 <USART_PeriClockControl+0x94>
			USART6_PCLK_EN();
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <USART_PeriClockControl+0xa4>)
 8000b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0c:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <USART_PeriClockControl+0xa4>)
 8000b0e:	f043 0320 	orr.w	r3, r3, #32
 8000b12:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40004400 	.word	0x40004400
 8000b2c:	40004800 	.word	0x40004800
 8000b30:	40004c00 	.word	0x40004c00
 8000b34:	40005000 	.word	0x40005000
 8000b38:	40011400 	.word	0x40011400

08000b3c <USART_SetBaudRate>:
 * @return            - none
 *
 * @Note              - Uses APB clock and calculates USARTDIV
 *********************************************************************/
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
	uint32_t PCLKx;
	uint32_t usartdiv;
	uint32_t M_part, F_part;
	uint32_t tempreg = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]

	// Get the value of APB bus clock
	if(pUSARTx == USART1 || pUSARTx == USART6)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a33      	ldr	r2, [pc, #204]	; (8000c1c <USART_SetBaudRate+0xe0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d003      	beq.n	8000b5a <USART_SetBaudRate+0x1e>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a32      	ldr	r2, [pc, #200]	; (8000c20 <USART_SetBaudRate+0xe4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d103      	bne.n	8000b62 <USART_SetBaudRate+0x26>
	{
		// USART1 and USART6 are on APB2
		PCLKx = RCC_GetPCLK2Value();
 8000b5a:	f7ff ff31 	bl	80009c0 <RCC_GetPCLK2Value>
 8000b5e:	61f8      	str	r0, [r7, #28]
 8000b60:	e002      	b.n	8000b68 <USART_SetBaudRate+0x2c>
	}
	else
	{
		// USART2, USART3, UART4, UART5 are on APB1
		PCLKx = RCC_GetPCLK1Value();
 8000b62:	f7ff fed5 	bl	8000910 <RCC_GetPCLK1Value>
 8000b66:	61f8      	str	r0, [r7, #28]
	}

	// Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d00b      	beq.n	8000b8c <USART_SetBaudRate+0x50>
	{
		// OVER8 = 1, oversampling by 8
		usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8000b74:	69fa      	ldr	r2, [r7, #28]
 8000b76:	4613      	mov	r3, r2
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	4413      	add	r3, r2
 8000b7c:	009a      	lsls	r2, r3, #2
 8000b7e:	441a      	add	r2, r3
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b88:	61bb      	str	r3, [r7, #24]
 8000b8a:	e00a      	b.n	8000ba2 <USART_SetBaudRate+0x66>
	}
	else
	{
		// OVER8 = 0, oversampling by 16
		usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8000b8c:	69fa      	ldr	r2, [r7, #28]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	009a      	lsls	r2, r3, #2
 8000b96:	441a      	add	r2, r3
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba0:	61bb      	str	r3, [r7, #24]
	}

	// Calculate mantissa part
	M_part = usartdiv / 100;
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <USART_SetBaudRate+0xe8>)
 8000ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8000baa:	095b      	lsrs	r3, r3, #5
 8000bac:	60fb      	str	r3, [r7, #12]
	tempreg |= (M_part << 4);
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	011b      	lsls	r3, r3, #4
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]

	// Calculate fractional part
	F_part = (usartdiv - (M_part * 100));
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2264      	movs	r2, #100	; 0x64
 8000bbc:	fb02 f303 	mul.w	r3, r2, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	1ad3      	subs	r3, r2, r3
 8000bc4:	617b      	str	r3, [r7, #20]

	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d00c      	beq.n	8000bec <USART_SetBaudRate+0xb0>
	{
		// OVER8 = 1, oversampling by 8
		F_part = ((F_part * 8) + 50) / 100;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	3332      	adds	r3, #50	; 0x32
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <USART_SetBaudRate+0xe8>)
 8000bda:	fba2 2303 	umull	r2, r3, r2, r3
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	617b      	str	r3, [r7, #20]
		F_part &= 0x07;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	f003 0307 	and.w	r3, r3, #7
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	e00b      	b.n	8000c04 <USART_SetBaudRate+0xc8>
	}
	else
	{
		// OVER8 = 0, oversampling by 16
		F_part = ((F_part * 16) + 50) / 100;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	3332      	adds	r3, #50	; 0x32
 8000bf2:	4a0c      	ldr	r2, [pc, #48]	; (8000c24 <USART_SetBaudRate+0xe8>)
 8000bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf8:	095b      	lsrs	r3, r3, #5
 8000bfa:	617b      	str	r3, [r7, #20]
		F_part &= 0x0F;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	617b      	str	r3, [r7, #20]
	}

	tempreg |= F_part;
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]

	// Copy value to BRR register
	pUSARTx->BRR = tempreg;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	609a      	str	r2, [r3, #8]
}
 8000c12:	bf00      	nop
 8000c14:	3720      	adds	r7, #32
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40011000 	.word	0x40011000
 8000c20:	40011400 	.word	0x40011400
 8000c24:	51eb851f 	.word	0x51eb851f

08000c28 <USART_Init>:
 * @return            - none
 *
 * @Note              - Configures mode, baud rate, word length, stop bits, parity
 *********************************************************************/
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]

	// Enable USART peripheral clock
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2101      	movs	r1, #1
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff20 	bl	8000a80 <USART_PeriClockControl>

	// 1. Configure CR1 register

	// Enable USART Tx and Rx engines according to mode
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	791b      	ldrb	r3, [r3, #4]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d104      	bne.n	8000c52 <USART_Init+0x2a>
	{
		tempreg |= (1 << USART_CR1_RE);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f043 0304 	orr.w	r3, r3, #4
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e010      	b.n	8000c74 <USART_Init+0x4c>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	791b      	ldrb	r3, [r3, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d104      	bne.n	8000c64 <USART_Init+0x3c>
	{
		tempreg |= (1 << USART_CR1_TE);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	e007      	b.n	8000c74 <USART_Init+0x4c>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	791b      	ldrb	r3, [r3, #4]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d103      	bne.n	8000c74 <USART_Init+0x4c>
	{
		tempreg |= ((1 << USART_CR1_TE) | (1 << USART_CR1_RE));
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f043 030c 	orr.w	r3, r3, #12
 8000c72:	60fb      	str	r3, [r7, #12]
	}

	// Configure word length
	tempreg |= (pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	7b5b      	ldrb	r3, [r3, #13]
 8000c78:	031b      	lsls	r3, r3, #12
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]

	// Configure parity control
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	7b9b      	ldrb	r3, [r3, #14]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d104      	bne.n	8000c94 <USART_Init+0x6c>
	{
		tempreg |= (1 << USART_CR1_PCE);
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	e00b      	b.n	8000cac <USART_Init+0x84>
		// EVEN parity (PS bit = 0, already cleared)
	}
	else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	7b9b      	ldrb	r3, [r3, #14]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d107      	bne.n	8000cac <USART_Init+0x84>
	{
		tempreg |= (1 << USART_CR1_PCE);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca2:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR1_PS);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	60da      	str	r2, [r3, #12]

	// 2. Configure CR2 register
	tempreg = 0;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]

	// Configure stop bits
	tempreg |= (pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	7b1b      	ldrb	r3, [r3, #12]
 8000cbc:	031b      	lsls	r3, r3, #12
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	60fb      	str	r3, [r7, #12]

	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

	// 3. Configure CR3 register
	tempreg = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]

	// Configure hardware flow control
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	7bdb      	ldrb	r3, [r3, #15]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d104      	bne.n	8000ce4 <USART_Init+0xbc>
	{
		tempreg |= (1 << USART_CR3_CTSE);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	e010      	b.n	8000d06 <USART_Init+0xde>
	}
	else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	7bdb      	ldrb	r3, [r3, #15]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d104      	bne.n	8000cf6 <USART_Init+0xce>
	{
		tempreg |= (1 << USART_CR3_RTSE);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e007      	b.n	8000d06 <USART_Init+0xde>
	}
	else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	7bdb      	ldrb	r3, [r3, #15]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d103      	bne.n	8000d06 <USART_Init+0xde>
	{
		tempreg |= ((1 << USART_CR3_CTSE) | (1 << USART_CR3_RTSE));
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d04:	60fb      	str	r3, [r7, #12]
	}

	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	615a      	str	r2, [r3, #20]

	// 4. Configure baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	4619      	mov	r1, r3
 8000d18:	4610      	mov	r0, r2
 8000d1a:	f7ff ff0f 	bl	8000b3c <USART_SetBaudRate>
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <USART_GetFlagStatus>:
 * @return            - Flag status (SET or RESET)
 *
 * @Note              - Checks SR register
 *********************************************************************/
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx->SR & StatusFlagName)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	78fb      	ldrb	r3, [r7, #3]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <USART_GetFlagStatus+0x1c>
	{
		return SET;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <USART_GetFlagStatus+0x1e>
	}
	return RESET;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <USART_PeripheralControl>:
 * @return            - none
 *
 * @Note              - Controls UE bit in CR1 register
 *********************************************************************/
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000d5c:	78fb      	ldrb	r3, [r7, #3]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d106      	bne.n	8000d70 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000d6e:	e005      	b.n	8000d7c <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	60da      	str	r2, [r3, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <USART_SendData>:
 * @return            - none
 *
 * @Note              - This is a blocking call (polling mode)
 *********************************************************************/
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;

	// Loop over until Len number of bytes are transferred
	for(uint32_t i = 0; i < Len; i++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	e031      	b.n	8000dfe <USART_SendData+0x76>
	{
		// Wait until TXE flag is set
		while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TXE));
 8000d9a:	bf00      	nop
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2180      	movs	r1, #128	; 0x80
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff ffbf 	bl	8000d26 <USART_GetFlagStatus>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f6      	beq.n	8000d9c <USART_SendData+0x14>

		// Check word length (8 or 9 bits)
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	7b5b      	ldrb	r3, [r3, #13]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d118      	bne.n	8000de8 <USART_SendData+0x60>
		{
			// 9-bit data transfer
			pdata = (uint16_t*)pTxBuffer;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dc8:	605a      	str	r2, [r3, #4]

			// Check parity control
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	7b9b      	ldrb	r3, [r3, #14]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d106      	bne.n	8000de0 <USART_SendData+0x58>
			{
				// No parity, all 9 bits are user data
				pTxBuffer++;
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	e00b      	b.n	8000df8 <USART_SendData+0x70>
			}
			else
			{
				// Parity bit used, only 8 bits are user data
				pTxBuffer++;
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3301      	adds	r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	e007      	b.n	8000df8 <USART_SendData+0x70>
			}
		}
		else
		{
			// 8-bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
			pTxBuffer++;
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	3301      	adds	r3, #1
 8000df6:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0; i < Len; i++)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d3c9      	bcc.n	8000d9a <USART_SendData+0x12>
		}
	}

	// Wait until TC flag is set (transmission complete)
	while(!USART_GetFlagStatus(pUSARTHandle->pUSARTx, USART_FLAG_TC));
 8000e06:	bf00      	nop
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2140      	movs	r1, #64	; 0x40
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff89 	bl	8000d26 <USART_GetFlagStatus>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f6      	beq.n	8000e08 <USART_SendData+0x80>
}
 8000e1a:	bf00      	nop
 8000e1c:	bf00      	nop
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <__libc_init_array>:
 8000e24:	b570      	push	{r4, r5, r6, lr}
 8000e26:	4d0d      	ldr	r5, [pc, #52]	; (8000e5c <__libc_init_array+0x38>)
 8000e28:	4c0d      	ldr	r4, [pc, #52]	; (8000e60 <__libc_init_array+0x3c>)
 8000e2a:	1b64      	subs	r4, r4, r5
 8000e2c:	10a4      	asrs	r4, r4, #2
 8000e2e:	2600      	movs	r6, #0
 8000e30:	42a6      	cmp	r6, r4
 8000e32:	d109      	bne.n	8000e48 <__libc_init_array+0x24>
 8000e34:	4d0b      	ldr	r5, [pc, #44]	; (8000e64 <__libc_init_array+0x40>)
 8000e36:	4c0c      	ldr	r4, [pc, #48]	; (8000e68 <__libc_init_array+0x44>)
 8000e38:	f000 f818 	bl	8000e6c <_init>
 8000e3c:	1b64      	subs	r4, r4, r5
 8000e3e:	10a4      	asrs	r4, r4, #2
 8000e40:	2600      	movs	r6, #0
 8000e42:	42a6      	cmp	r6, r4
 8000e44:	d105      	bne.n	8000e52 <__libc_init_array+0x2e>
 8000e46:	bd70      	pop	{r4, r5, r6, pc}
 8000e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e4c:	4798      	blx	r3
 8000e4e:	3601      	adds	r6, #1
 8000e50:	e7ee      	b.n	8000e30 <__libc_init_array+0xc>
 8000e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e56:	4798      	blx	r3
 8000e58:	3601      	adds	r6, #1
 8000e5a:	e7f2      	b.n	8000e42 <__libc_init_array+0x1e>
 8000e5c:	08000e84 	.word	0x08000e84
 8000e60:	08000e84 	.word	0x08000e84
 8000e64:	08000e84 	.word	0x08000e84
 8000e68:	08000e88 	.word	0x08000e88

08000e6c <_init>:
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6e:	bf00      	nop
 8000e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e72:	bc08      	pop	{r3}
 8000e74:	469e      	mov	lr, r3
 8000e76:	4770      	bx	lr

08000e78 <_fini>:
 8000e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7a:	bf00      	nop
 8000e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7e:	bc08      	pop	{r3}
 8000e80:	469e      	mov	lr, r3
 8000e82:	4770      	bx	lr
