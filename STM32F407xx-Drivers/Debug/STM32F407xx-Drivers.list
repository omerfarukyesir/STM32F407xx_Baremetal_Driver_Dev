
STM32F407xx-Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0800093c  0800093c  0001093c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000948  08000948  00010950  2**0
                  CONTENTS
  4 .ARM          00000000  08000948  08000948  00010950  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000948  08000950  00010950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000948  08000948  00010948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800094c  0800094c  0001094c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010950  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010950  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010950  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010980  2**0
                  CONTENTS, READONLY
 14 .debug_info   000013e5  00000000  00000000  000109c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000044e  00000000  00000000  00011da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000170  00000000  00000000  000121f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000010b  00000000  00000000  00012368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000226c  00000000  00000000  00012473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001c17  00000000  00000000  000146df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009281  00000000  00000000  000162f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000530  00000000  00000000  0001f578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000088  00000000  00000000  0001faa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000924 	.word	0x08000924

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000924 	.word	0x08000924

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001de:	4b14      	ldr	r3, [pc, #80]	; (8000230 <SPI2_GPIOInits+0x58>)
 80001e0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80001ee:	2300      	movs	r3, #0
 80001f0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f891 	bl	8000324 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000202:	230f      	movs	r3, #15
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f88b 	bl	8000324 <GPIO_Init>

	//MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800020e:	230e      	movs	r3, #14
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f885 	bl	8000324 <GPIO_Init>


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800021a:	230c      	movs	r3, #12
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f87f 	bl	8000324 <GPIO_Init>


}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40020400 	.word	0x40020400

08000234 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b088      	sub	sp, #32
 8000238:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800023a:	4b0c      	ldr	r3, [pc, #48]	; (800026c <SPI2_Inits+0x38>)
 800023c:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800023e:	2301      	movs	r3, #1
 8000240:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000242:	2301      	movs	r3, #1
 8000244:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;//generates sclk of 8MHz
 8000246:	2300      	movs	r3, #0
 8000248:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800024a:	2300      	movs	r3, #0
 800024c:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_HIGH;
 800024e:	2301      	movs	r3, #1
 8000250:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000252:	2300      	movs	r3, #0
 8000254:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; //software slave management enabled for NSS pin
 8000256:	2301      	movs	r3, #1
 8000258:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 800025a:	463b      	mov	r3, r7
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fa59 	bl	8000714 <SPI_Init>
}
 8000262:	bf00      	nop
 8000264:	3720      	adds	r7, #32
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40003800 	.word	0x40003800

08000270 <main>:

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 8000276:	4a14      	ldr	r2, [pc, #80]	; (80002c8 <main+0x58>)
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	ca07      	ldmia	r2, {r0, r1, r2}
 800027c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000280:	f7ff ffaa 	bl	80001d8 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000284:	f7ff ffd6 	bl	8000234 <SPI2_Inits>

	//this makes NSS signal internally high and avoids MODF error
	SPI_SSIConfig(SPI2,ENABLE);
 8000288:	2101      	movs	r1, #1
 800028a:	4810      	ldr	r0, [pc, #64]	; (80002cc <main+0x5c>)
 800028c:	f000 fb09 	bl	80008a2 <SPI_SSIConfig>

	//enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	480e      	ldr	r0, [pc, #56]	; (80002cc <main+0x5c>)
 8000294:	f000 fae9 	bl	800086a <SPI_PeripheralControl>

	//to send data
	SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ff94 	bl	80001c8 <strlen>
 80002a0:	4602      	mov	r2, r0
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4619      	mov	r1, r3
 80002a6:	4809      	ldr	r0, [pc, #36]	; (80002cc <main+0x5c>)
 80002a8:	f000 faa3 	bl	80007f2 <SPI_SendData>

	//lets confirm SPI is not busy
	while( SPI_GetFlagStatus(SPI2,( 1 << SPI_SR_BSY)) );
 80002ac:	bf00      	nop
 80002ae:	2180      	movs	r1, #128	; 0x80
 80002b0:	4806      	ldr	r0, [pc, #24]	; (80002cc <main+0x5c>)
 80002b2:	f000 fa8a 	bl	80007ca <SPI_GetFlagStatus>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d1f8      	bne.n	80002ae <main+0x3e>

	//Disable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,DISABLE);
 80002bc:	2100      	movs	r1, #0
 80002be:	4803      	ldr	r0, [pc, #12]	; (80002cc <main+0x5c>)
 80002c0:	f000 fad3 	bl	800086a <SPI_PeripheralControl>

	while(1);
 80002c4:	e7fe      	b.n	80002c4 <main+0x54>
 80002c6:	bf00      	nop
 80002c8:	0800093c 	.word	0x0800093c
 80002cc:	40003800 	.word	0x40003800

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 faed 	bl	80008dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ffb5 	bl	8000270 <main>

08000306 <LoopForever>:

LoopForever:
  b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	08000950 	.word	0x08000950
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000001c 	.word	0x2000001c

08000320 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_IRQHandler>
	...

08000324 <GPIO_Init>:
 * @return            - none
 *
 * @Note              - none
 *********************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000324:	b480      	push	{r7}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temporary register value
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]

	// 1. Configure mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	795b      	ldrb	r3, [r3, #5]
 8000334:	2b03      	cmp	r3, #3
 8000336:	d820      	bhi.n	800037a <GPIO_Init+0x56>
	{
		// Non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	795b      	ldrb	r3, [r3, #5]
 800033c:	461a      	mov	r2, r3
			   (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	791b      	ldrb	r3, [r3, #4]
 8000342:	005b      	lsls	r3, r3, #1
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <<
 8000344:	fa02 f303 	lsl.w	r3, r2, r3
 8000348:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	681a      	ldr	r2, [r3, #0]
			   (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // clear
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	791b      	ldrb	r3, [r3, #4]
 8000354:	005b      	lsls	r3, r3, #1
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 <<
 8000356:	2103      	movs	r1, #3
 8000358:	fa01 f303 	lsl.w	r3, r1, r3
 800035c:	43db      	mvns	r3, r3
 800035e:	4619      	mov	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	400a      	ands	r2, r1
 8000366:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	6819      	ldr	r1, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	697a      	ldr	r2, [r7, #20]
 8000374:	430a      	orrs	r2, r1
 8000376:	601a      	str	r2, [r3, #0]
 8000378:	e0cb      	b.n	8000512 <GPIO_Init+0x1ee>
	}
	else
	{
		// Interrupt mode configuration
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	795b      	ldrb	r3, [r3, #5]
 800037e:	2b04      	cmp	r3, #4
 8000380:	d117      	bne.n	80003b2 <GPIO_Init+0x8e>
		{
			// Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000382:	4b4b      	ldr	r3, [pc, #300]	; (80004b0 <GPIO_Init+0x18c>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	7912      	ldrb	r2, [r2, #4]
 800038a:	4611      	mov	r1, r2
 800038c:	2201      	movs	r2, #1
 800038e:	408a      	lsls	r2, r1
 8000390:	4611      	mov	r1, r2
 8000392:	4a47      	ldr	r2, [pc, #284]	; (80004b0 <GPIO_Init+0x18c>)
 8000394:	430b      	orrs	r3, r1
 8000396:	60d3      	str	r3, [r2, #12]
			// Clear RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000398:	4b45      	ldr	r3, [pc, #276]	; (80004b0 <GPIO_Init+0x18c>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	687a      	ldr	r2, [r7, #4]
 800039e:	7912      	ldrb	r2, [r2, #4]
 80003a0:	4611      	mov	r1, r2
 80003a2:	2201      	movs	r2, #1
 80003a4:	408a      	lsls	r2, r1
 80003a6:	43d2      	mvns	r2, r2
 80003a8:	4611      	mov	r1, r2
 80003aa:	4a41      	ldr	r2, [pc, #260]	; (80004b0 <GPIO_Init+0x18c>)
 80003ac:	400b      	ands	r3, r1
 80003ae:	6093      	str	r3, [r2, #8]
 80003b0:	e035      	b.n	800041e <GPIO_Init+0xfa>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	795b      	ldrb	r3, [r3, #5]
 80003b6:	2b05      	cmp	r3, #5
 80003b8:	d117      	bne.n	80003ea <GPIO_Init+0xc6>
		{
			// Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003ba:	4b3d      	ldr	r3, [pc, #244]	; (80004b0 <GPIO_Init+0x18c>)
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	7912      	ldrb	r2, [r2, #4]
 80003c2:	4611      	mov	r1, r2
 80003c4:	2201      	movs	r2, #1
 80003c6:	408a      	lsls	r2, r1
 80003c8:	4611      	mov	r1, r2
 80003ca:	4a39      	ldr	r2, [pc, #228]	; (80004b0 <GPIO_Init+0x18c>)
 80003cc:	430b      	orrs	r3, r1
 80003ce:	6093      	str	r3, [r2, #8]
			// Clear FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003d0:	4b37      	ldr	r3, [pc, #220]	; (80004b0 <GPIO_Init+0x18c>)
 80003d2:	68db      	ldr	r3, [r3, #12]
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	7912      	ldrb	r2, [r2, #4]
 80003d8:	4611      	mov	r1, r2
 80003da:	2201      	movs	r2, #1
 80003dc:	408a      	lsls	r2, r1
 80003de:	43d2      	mvns	r2, r2
 80003e0:	4611      	mov	r1, r2
 80003e2:	4a33      	ldr	r2, [pc, #204]	; (80004b0 <GPIO_Init+0x18c>)
 80003e4:	400b      	ands	r3, r1
 80003e6:	60d3      	str	r3, [r2, #12]
 80003e8:	e019      	b.n	800041e <GPIO_Init+0xfa>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	795b      	ldrb	r3, [r3, #5]
 80003ee:	2b06      	cmp	r3, #6
 80003f0:	d115      	bne.n	800041e <GPIO_Init+0xfa>
		{
			// Both edges
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f2:	4b2f      	ldr	r3, [pc, #188]	; (80004b0 <GPIO_Init+0x18c>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	7912      	ldrb	r2, [r2, #4]
 80003fa:	4611      	mov	r1, r2
 80003fc:	2201      	movs	r2, #1
 80003fe:	408a      	lsls	r2, r1
 8000400:	4611      	mov	r1, r2
 8000402:	4a2b      	ldr	r2, [pc, #172]	; (80004b0 <GPIO_Init+0x18c>)
 8000404:	430b      	orrs	r3, r1
 8000406:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000408:	4b29      	ldr	r3, [pc, #164]	; (80004b0 <GPIO_Init+0x18c>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	7912      	ldrb	r2, [r2, #4]
 8000410:	4611      	mov	r1, r2
 8000412:	2201      	movs	r2, #1
 8000414:	408a      	lsls	r2, r1
 8000416:	4611      	mov	r1, r2
 8000418:	4a25      	ldr	r2, [pc, #148]	; (80004b0 <GPIO_Init+0x18c>)
 800041a:	430b      	orrs	r3, r1
 800041c:	60d3      	str	r3, [r2, #12]
		}

		// 2. Configure GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	791b      	ldrb	r3, [r3, #4]
 8000422:	089b      	lsrs	r3, r3, #2
 8000424:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	f003 0303 	and.w	r3, r3, #3
 800042e:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a1f      	ldr	r2, [pc, #124]	; (80004b4 <GPIO_Init+0x190>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d04e      	beq.n	80004d8 <GPIO_Init+0x1b4>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a1e      	ldr	r2, [pc, #120]	; (80004b8 <GPIO_Init+0x194>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d032      	beq.n	80004aa <GPIO_Init+0x186>
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a1c      	ldr	r2, [pc, #112]	; (80004bc <GPIO_Init+0x198>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d02b      	beq.n	80004a6 <GPIO_Init+0x182>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <GPIO_Init+0x19c>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d024      	beq.n	80004a2 <GPIO_Init+0x17e>
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a19      	ldr	r2, [pc, #100]	; (80004c4 <GPIO_Init+0x1a0>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d01d      	beq.n	800049e <GPIO_Init+0x17a>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <GPIO_Init+0x1a4>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d016      	beq.n	800049a <GPIO_Init+0x176>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a16      	ldr	r2, [pc, #88]	; (80004cc <GPIO_Init+0x1a8>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d00f      	beq.n	8000496 <GPIO_Init+0x172>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a15      	ldr	r2, [pc, #84]	; (80004d0 <GPIO_Init+0x1ac>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d008      	beq.n	8000492 <GPIO_Init+0x16e>
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a13      	ldr	r2, [pc, #76]	; (80004d4 <GPIO_Init+0x1b0>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d101      	bne.n	800048e <GPIO_Init+0x16a>
 800048a:	2308      	movs	r3, #8
 800048c:	e025      	b.n	80004da <GPIO_Init+0x1b6>
 800048e:	2300      	movs	r3, #0
 8000490:	e023      	b.n	80004da <GPIO_Init+0x1b6>
 8000492:	2307      	movs	r3, #7
 8000494:	e021      	b.n	80004da <GPIO_Init+0x1b6>
 8000496:	2306      	movs	r3, #6
 8000498:	e01f      	b.n	80004da <GPIO_Init+0x1b6>
 800049a:	2305      	movs	r3, #5
 800049c:	e01d      	b.n	80004da <GPIO_Init+0x1b6>
 800049e:	2304      	movs	r3, #4
 80004a0:	e01b      	b.n	80004da <GPIO_Init+0x1b6>
 80004a2:	2303      	movs	r3, #3
 80004a4:	e019      	b.n	80004da <GPIO_Init+0x1b6>
 80004a6:	2302      	movs	r3, #2
 80004a8:	e017      	b.n	80004da <GPIO_Init+0x1b6>
 80004aa:	2301      	movs	r3, #1
 80004ac:	e015      	b.n	80004da <GPIO_Init+0x1b6>
 80004ae:	bf00      	nop
 80004b0:	40013c00 	.word	0x40013c00
 80004b4:	40020000 	.word	0x40020000
 80004b8:	40020400 	.word	0x40020400
 80004bc:	40020800 	.word	0x40020800
 80004c0:	40020c00 	.word	0x40020c00
 80004c4:	40021000 	.word	0x40021000
 80004c8:	40021400 	.word	0x40021400
 80004cc:	40021800 	.word	0x40021800
 80004d0:	40021c00 	.word	0x40021c00
 80004d4:	40022000 	.word	0x40022000
 80004d8:	2300      	movs	r3, #0
 80004da:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80004dc:	4b5e      	ldr	r3, [pc, #376]	; (8000658 <GPIO_Init+0x334>)
 80004de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004e0:	4a5d      	ldr	r2, [pc, #372]	; (8000658 <GPIO_Init+0x334>)
 80004e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004e6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 80004e8:	7c7a      	ldrb	r2, [r7, #17]
 80004ea:	7cbb      	ldrb	r3, [r7, #18]
 80004ec:	009b      	lsls	r3, r3, #2
 80004ee:	fa02 f103 	lsl.w	r1, r2, r3
 80004f2:	4a5a      	ldr	r2, [pc, #360]	; (800065c <GPIO_Init+0x338>)
 80004f4:	7cfb      	ldrb	r3, [r7, #19]
 80004f6:	3302      	adds	r3, #2
 80004f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. Enable EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004fc:	4b58      	ldr	r3, [pc, #352]	; (8000660 <GPIO_Init+0x33c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	7912      	ldrb	r2, [r2, #4]
 8000504:	4611      	mov	r1, r2
 8000506:	2201      	movs	r2, #1
 8000508:	408a      	lsls	r2, r1
 800050a:	4611      	mov	r1, r2
 800050c:	4a54      	ldr	r2, [pc, #336]	; (8000660 <GPIO_Init+0x33c>)
 800050e:	430b      	orrs	r3, r1
 8000510:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]

	// 2. Configure speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	799b      	ldrb	r3, [r3, #6]
 800051a:	461a      	mov	r2, r3
		   (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	005b      	lsls	r3, r3, #1
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed <<
 8000522:	fa02 f303 	lsl.w	r3, r2, r3
 8000526:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 <<
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	689a      	ldr	r2, [r3, #8]
		   (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	791b      	ldrb	r3, [r3, #4]
 8000532:	005b      	lsls	r3, r3, #1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 <<
 8000534:	2103      	movs	r1, #3
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	43db      	mvns	r3, r3
 800053c:	4619      	mov	r1, r3
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	400a      	ands	r2, r1
 8000544:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	6899      	ldr	r1, [r3, #8]
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	697a      	ldr	r2, [r7, #20]
 8000552:	430a      	orrs	r2, r1
 8000554:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	617b      	str	r3, [r7, #20]

	// 3. Configure pull-up/pull-down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	79db      	ldrb	r3, [r3, #7]
 800055e:	461a      	mov	r2, r3
		   (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	005b      	lsls	r3, r3, #1
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl <<
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 <<
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	68da      	ldr	r2, [r3, #12]
		   (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	791b      	ldrb	r3, [r3, #4]
 8000576:	005b      	lsls	r3, r3, #1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 <<
 8000578:	2103      	movs	r1, #3
 800057a:	fa01 f303 	lsl.w	r3, r1, r3
 800057e:	43db      	mvns	r3, r3
 8000580:	4619      	mov	r1, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	400a      	ands	r2, r1
 8000588:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	68d9      	ldr	r1, [r3, #12]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	697a      	ldr	r2, [r7, #20]
 8000596:	430a      	orrs	r2, r1
 8000598:	60da      	str	r2, [r3, #12]

	temp = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]

	// 4. Configure output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	7a1b      	ldrb	r3, [r3, #8]
 80005a2:	461a      	mov	r2, r3
		   (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType <<
 80005a8:	fa02 f303 	lsl.w	r3, r2, r3
 80005ac:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 <<
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	685a      	ldr	r2, [r3, #4]
		   (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	4619      	mov	r1, r3
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 <<
 80005ba:	2301      	movs	r3, #1
 80005bc:	408b      	lsls	r3, r1
 80005be:	43db      	mvns	r3, r3
 80005c0:	4619      	mov	r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	400a      	ands	r2, r1
 80005c8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	6859      	ldr	r1, [r3, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	430a      	orrs	r2, r1
 80005d8:	605a      	str	r2, [r3, #4]

	temp = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

	// 5. Configure alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	795b      	ldrb	r3, [r3, #5]
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	d131      	bne.n	800064a <GPIO_Init+0x326>
	{
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	08db      	lsrs	r3, r3, #3
 80005ec:	743b      	strb	r3, [r7, #16]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	f003 0307 	and.w	r3, r3, #7
 80005f6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	7c3a      	ldrb	r2, [r7, #16]
 80005fe:	3208      	adds	r2, #8
 8000600:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	220f      	movs	r2, #15
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	43db      	mvns	r3, r3
 8000610:	4618      	mov	r0, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	7c3a      	ldrb	r2, [r7, #16]
 8000618:	4001      	ands	r1, r0
 800061a:	3208      	adds	r2, #8
 800061c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	7c3a      	ldrb	r2, [r7, #16]
 8000626:	3208      	adds	r2, #8
 8000628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
			(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	7a5b      	ldrb	r3, [r3, #9]
 8000630:	461a      	mov	r2, r3
 8000632:	7bfb      	ldrb	r3, [r7, #15]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	4618      	mov	r0, r3
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	7c3a      	ldrb	r2, [r7, #16]
 8000642:	4301      	orrs	r1, r0
 8000644:	3208      	adds	r2, #8
 8000646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 800064a:	bf00      	nop
 800064c:	371c      	adds	r7, #28
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40013800 	.word	0x40013800
 8000660:	40013c00 	.word	0x40013c00

08000664 <SPI_PeriClockControl>:
 *
 * @Note        - None
 *
 *****************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d120      	bne.n	80006b8 <SPI_PeriClockControl+0x54>
    {
        if(pSPIx == SPI1) SPI1_PCLK_EN();
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a22      	ldr	r2, [pc, #136]	; (8000704 <SPI_PeriClockControl+0xa0>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d106      	bne.n	800068c <SPI_PeriClockControl+0x28>
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <SPI_PeriClockControl+0xa4>)
 8000680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000682:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SPI_PeriClockControl+0xa4>)
 8000684:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000688:	6453      	str	r3, [r2, #68]	; 0x44
    {
        if(pSPIx == SPI1) SPI1_PCLK_DI();
        else if(pSPIx == SPI2) SPI2_PCLK_DI();
        else if(pSPIx == SPI3) SPI3_PCLK_DI();
    }
}
 800068a:	e035      	b.n	80006f8 <SPI_PeriClockControl+0x94>
        else if(pSPIx == SPI2) SPI2_PCLK_EN();
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4a1f      	ldr	r2, [pc, #124]	; (800070c <SPI_PeriClockControl+0xa8>)
 8000690:	4293      	cmp	r3, r2
 8000692:	d106      	bne.n	80006a2 <SPI_PeriClockControl+0x3e>
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <SPI_PeriClockControl+0xa4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <SPI_PeriClockControl+0xa4>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006a0:	e02a      	b.n	80006f8 <SPI_PeriClockControl+0x94>
        else if(pSPIx == SPI3) SPI3_PCLK_EN();
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <SPI_PeriClockControl+0xac>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d126      	bne.n	80006f8 <SPI_PeriClockControl+0x94>
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <SPI_PeriClockControl+0xa4>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a16      	ldr	r2, [pc, #88]	; (8000708 <SPI_PeriClockControl+0xa4>)
 80006b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006b6:	e01f      	b.n	80006f8 <SPI_PeriClockControl+0x94>
        if(pSPIx == SPI1) SPI1_PCLK_DI();
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <SPI_PeriClockControl+0xa0>)
 80006bc:	4293      	cmp	r3, r2
 80006be:	d106      	bne.n	80006ce <SPI_PeriClockControl+0x6a>
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <SPI_PeriClockControl+0xa4>)
 80006c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c4:	4a10      	ldr	r2, [pc, #64]	; (8000708 <SPI_PeriClockControl+0xa4>)
 80006c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006ca:	6453      	str	r3, [r2, #68]	; 0x44
}
 80006cc:	e014      	b.n	80006f8 <SPI_PeriClockControl+0x94>
        else if(pSPIx == SPI2) SPI2_PCLK_DI();
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <SPI_PeriClockControl+0xa8>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d106      	bne.n	80006e4 <SPI_PeriClockControl+0x80>
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <SPI_PeriClockControl+0xa4>)
 80006d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006da:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <SPI_PeriClockControl+0xa4>)
 80006dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006e0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006e2:	e009      	b.n	80006f8 <SPI_PeriClockControl+0x94>
        else if(pSPIx == SPI3) SPI3_PCLK_DI();
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <SPI_PeriClockControl+0xac>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d105      	bne.n	80006f8 <SPI_PeriClockControl+0x94>
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <SPI_PeriClockControl+0xa4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	4a05      	ldr	r2, [pc, #20]	; (8000708 <SPI_PeriClockControl+0xa4>)
 80006f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006f6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	40013000 	.word	0x40013000
 8000708:	40023800 	.word	0x40023800
 800070c:	40003800 	.word	0x40003800
 8000710:	40003c00 	.word	0x40003c00

08000714 <SPI_Init>:
 * @Note        - Configures device mode, bus config, SCLK speed,
 *                DFF, CPOL, CPHA, and SSM bits.
 *
 *****************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    uint32_t tempreg = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]

    /* Enable SPI peripheral clock */
    SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2101      	movs	r1, #1
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff9c 	bl	8000664 <SPI_PeriClockControl>

    /* 1. Configure device mode */
    tempreg |= (pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	461a      	mov	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4313      	orrs	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]

    /* 2. Configure bus config */
    if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	795b      	ldrb	r3, [r3, #5]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d104      	bne.n	800074c <SPI_Init+0x38>
        tempreg &= ~(1U << SPI_CR1_BIDIMODE);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	e014      	b.n	8000776 <SPI_Init+0x62>
    else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	795b      	ldrb	r3, [r3, #5]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d104      	bne.n	800075e <SPI_Init+0x4a>
        tempreg |= (1U << SPI_CR1_BIDIMODE);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	e00b      	b.n	8000776 <SPI_Init+0x62>
    else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	795b      	ldrb	r3, [r3, #5]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d107      	bne.n	8000776 <SPI_Init+0x62>
    {
        tempreg &= ~(1U << SPI_CR1_BIDIMODE);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800076c:	60fb      	str	r3, [r7, #12]
        tempreg |= (1U << SPI_CR1_RXONLY);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000774:	60fb      	str	r3, [r7, #12]
    }

    /* 3. Configure SCLK speed */
    tempreg |= (pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	799b      	ldrb	r3, [r3, #6]
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	461a      	mov	r2, r3
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	4313      	orrs	r3, r2
 8000782:	60fb      	str	r3, [r7, #12]

    /* 4. Configure DFF */
    tempreg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	79db      	ldrb	r3, [r3, #7]
 8000788:	02db      	lsls	r3, r3, #11
 800078a:	461a      	mov	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	4313      	orrs	r3, r2
 8000790:	60fb      	str	r3, [r7, #12]

    /* 5. Configure CPOL and CPHA */
    tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	7a1b      	ldrb	r3, [r3, #8]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	461a      	mov	r2, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	4313      	orrs	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]
    tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	7a5b      	ldrb	r3, [r3, #9]
 80007a4:	461a      	mov	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	60fb      	str	r3, [r7, #12]

    /* 6. Configure SSM */
    tempreg |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	7a9b      	ldrb	r3, [r3, #10]
 80007b0:	025b      	lsls	r3, r3, #9
 80007b2:	461a      	mov	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]

    /* Write to CR1 register */
    pSPIHandle->pSPIx->CR1 = tempreg;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	601a      	str	r2, [r3, #0]
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <SPI_GetFlagStatus>:
 *
 * @Note        - None
 *
 *****************************************************************/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
 80007d2:	6039      	str	r1, [r7, #0]
    return (pSPIx->SR & FlagName) ? SET : RESET;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689a      	ldr	r2, [r3, #8]
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	4013      	ands	r3, r2
 80007dc:	2b00      	cmp	r3, #0
 80007de:	bf14      	ite	ne
 80007e0:	2301      	movne	r3, #1
 80007e2:	2300      	moveq	r3, #0
 80007e4:	b2db      	uxtb	r3, r3
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <SPI_SendData>:
 * @Note        - Waits for TXE flag before sending each byte/word.
 *                Waits until BSY flag is cleared at the end.
 *
 *****************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b084      	sub	sp, #16
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
    while(Len > 0U)
 80007fe:	e024      	b.n	800084a <SPI_SendData+0x58>
    {
        while(SPI_GetFlagStatus(pSPIx, (1U << SPI_SR_TXE)) == RESET);
 8000800:	bf00      	nop
 8000802:	2102      	movs	r1, #2
 8000804:	68f8      	ldr	r0, [r7, #12]
 8000806:	f7ff ffe0 	bl	80007ca <SPI_GetFlagStatus>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d0f8      	beq.n	8000802 <SPI_SendData+0x10>

        if(pSPIx->CR1 & (1U << SPI_CR1_DFF))
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00b      	beq.n	8000834 <SPI_SendData+0x42>
        {
            pSPIx->DR = *((uint16_t*)pTxBuffer);
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	60da      	str	r2, [r3, #12]
            pTxBuffer += 2;
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	3302      	adds	r3, #2
 800082a:	60bb      	str	r3, [r7, #8]
            Len -= 2;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3b02      	subs	r3, #2
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	e00a      	b.n	800084a <SPI_SendData+0x58>
        }
        else
        {
            pSPIx->DR = *pTxBuffer;
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	60da      	str	r2, [r3, #12]
            pTxBuffer++;
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	3301      	adds	r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
            Len--;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	607b      	str	r3, [r7, #4]
    while(Len > 0U)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d1d7      	bne.n	8000800 <SPI_SendData+0xe>
        }
    }

    while(SPI_GetFlagStatus(pSPIx, (1U << SPI_SR_BSY)) == SET);
 8000850:	bf00      	nop
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	68f8      	ldr	r0, [r7, #12]
 8000856:	f7ff ffb8 	bl	80007ca <SPI_GetFlagStatus>
 800085a:	4603      	mov	r3, r0
 800085c:	2b01      	cmp	r3, #1
 800085e:	d0f8      	beq.n	8000852 <SPI_SendData+0x60>
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <SPI_PeripheralControl>:
 *
 * @Note        - Sets or clears SPE bit in CR1.
 *
 *****************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	460b      	mov	r3, r1
 8000874:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE) pSPIx->CR1 |= (1U << SPI_CR1_SPE);
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d106      	bne.n	800088a <SPI_PeripheralControl+0x20>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	601a      	str	r2, [r3, #0]
    else pSPIx->CR1 &= ~(1U << SPI_CR1_SPE);
}
 8000888:	e005      	b.n	8000896 <SPI_PeripheralControl+0x2c>
    else pSPIx->CR1 &= ~(1U << SPI_CR1_SPE);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	601a      	str	r2, [r3, #0]
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <SPI_SSIConfig>:
 *
 * @Note        - Needed when SSM is enabled to avoid MODF error.
 *
 *****************************************************************/
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	460b      	mov	r3, r1
 80008ac:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE) pSPIx->CR1 |= (1U << SPI_CR1_SSI);
 80008ae:	78fb      	ldrb	r3, [r7, #3]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d106      	bne.n	80008c2 <SPI_SSIConfig+0x20>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	601a      	str	r2, [r3, #0]
    else pSPIx->CR1 &= ~(1U << SPI_CR1_SSI);
}
 80008c0:	e005      	b.n	80008ce <SPI_SSIConfig+0x2c>
    else pSPIx->CR1 &= ~(1U << SPI_CR1_SSI);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	601a      	str	r2, [r3, #0]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <__libc_init_array>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	4d0d      	ldr	r5, [pc, #52]	; (8000914 <__libc_init_array+0x38>)
 80008e0:	4c0d      	ldr	r4, [pc, #52]	; (8000918 <__libc_init_array+0x3c>)
 80008e2:	1b64      	subs	r4, r4, r5
 80008e4:	10a4      	asrs	r4, r4, #2
 80008e6:	2600      	movs	r6, #0
 80008e8:	42a6      	cmp	r6, r4
 80008ea:	d109      	bne.n	8000900 <__libc_init_array+0x24>
 80008ec:	4d0b      	ldr	r5, [pc, #44]	; (800091c <__libc_init_array+0x40>)
 80008ee:	4c0c      	ldr	r4, [pc, #48]	; (8000920 <__libc_init_array+0x44>)
 80008f0:	f000 f818 	bl	8000924 <_init>
 80008f4:	1b64      	subs	r4, r4, r5
 80008f6:	10a4      	asrs	r4, r4, #2
 80008f8:	2600      	movs	r6, #0
 80008fa:	42a6      	cmp	r6, r4
 80008fc:	d105      	bne.n	800090a <__libc_init_array+0x2e>
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f855 3b04 	ldr.w	r3, [r5], #4
 8000904:	4798      	blx	r3
 8000906:	3601      	adds	r6, #1
 8000908:	e7ee      	b.n	80008e8 <__libc_init_array+0xc>
 800090a:	f855 3b04 	ldr.w	r3, [r5], #4
 800090e:	4798      	blx	r3
 8000910:	3601      	adds	r6, #1
 8000912:	e7f2      	b.n	80008fa <__libc_init_array+0x1e>
 8000914:	08000948 	.word	0x08000948
 8000918:	08000948 	.word	0x08000948
 800091c:	08000948 	.word	0x08000948
 8000920:	0800094c 	.word	0x0800094c

08000924 <_init>:
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000926:	bf00      	nop
 8000928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800092a:	bc08      	pop	{r3}
 800092c:	469e      	mov	lr, r3
 800092e:	4770      	bx	lr

08000930 <_fini>:
 8000930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000932:	bf00      	nop
 8000934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000936:	bc08      	pop	{r3}
 8000938:	469e      	mov	lr, r3
 800093a:	4770      	bx	lr
